[
    {
        "id": "d0a8fa6ddbf311c2",
        "type": "subflow",
        "name": "[API] Get Token",
        "info": "Username and password for login are configured in settings-file.\n\nprocess.env.client_email = \"email\";\nprocess.env.client_password = \"password\";\n\nPlease contact Tequ-API administrator to get credentials.\n\n[https://api.tequ.fi]()",
        "category": "Tequ-API Client",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "386a9a683935141e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 300,
                "wires": [
                    {
                        "id": "7a8f6a815b1d5ce8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1020,
                "y": 140,
                "wires": [
                    {
                        "id": "287a6538d9f1a587",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "username",
                "type": "str",
                "value": "client_email",
                "ui": {
                    "icon": "font-awesome/fa-user-o"
                }
            },
            {
                "name": "password",
                "type": "str",
                "value": "client_password",
                "ui": {
                    "icon": "font-awesome/fa-lock",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "API_URL",
                "type": "str",
                "value": "https://api.tequ.fi"
            }
        ],
        "meta": {
            "license": "MIT"
        },
        "color": "#FFCC66",
        "icon": "node-red/envelope.svg",
        "status": {
            "x": 1020,
            "y": 360,
            "wires": [
                {
                    "id": "608f9914d32cc6cc",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ee92d6343982fd50",
        "type": "function",
        "z": "d0a8fa6ddbf311c2",
        "name": "App-ID Token",
        "func": "if(msg.topic == \"force_update\"){\n    node.status({fill:\"yellow\",shape:\"dot\",text:\"Forced update.\"})\n}\nelse{\n    node.status({fill:\"yellow\",shape:\"dot\",text:\"Updating token...\"})\n}\n\nlet username = env.get(\"username\");\nlet password = env.get(\"password\");\n\nmsg.url      =  env.get(\"API_URL\")+\"/api/v1/token\"\nmsg.method   = 'POST';\n\nmsg.payload  = {\n    \"grant_type\":\"password\",\n    \"username\":username,\n    \"password\":password\n};\n\nmsg.headers  = {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 280,
        "wires": [
            [
                "1d126793b821024c"
            ]
        ]
    },
    {
        "id": "1d126793b821024c",
        "type": "http request",
        "z": "d0a8fa6ddbf311c2",
        "name": "req",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 300,
        "wires": [
            [
                "7a8f6a815b1d5ce8"
            ]
        ]
    },
    {
        "id": "7a8f6a815b1d5ce8",
        "type": "function",
        "z": "d0a8fa6ddbf311c2",
        "name": "Parse response",
        "func": "var token = msg.payload.access_token;\nvar decoded = jwtDecode(token);\nmsg.payload = {\n    \"decoded\":decoded,\n    \"token\":token\n}\nnode.status({fill:\"green\",shape:\"dot\",text:\"Token updated.\"})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwtDecode",
                "module": "jwt-decode"
            }
        ],
        "x": 860,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1e0fd0798b825b1d",
        "type": "switch",
        "z": "d0a8fa6ddbf311c2",
        "name": "check keys",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "exp",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 200,
        "wires": [
            [
                "287a6538d9f1a587"
            ],
            [
                "ee92d6343982fd50"
            ]
        ]
    },
    {
        "id": "287a6538d9f1a587",
        "type": "function",
        "z": "d0a8fa6ddbf311c2",
        "name": "Check token",
        "func": "let jwt = msg.payload;\nlet time_left = jwt.exp - Math.round(new Date().getTime()/1000);\n\nif(time_left > 120){\n    node.status({fill:\"green\",shape:\"dot\",text:\"TOKEN OK. \"+time_left+\" s left.\"})\n    msg.do_login = false;\n}\nelse{\n    node.status({fill:\"red\",shape:\"dot\",text:\"Token expired. LOGIN again\"})\n    msg.do_login = true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 140,
        "wires": [
            [
                "a70fefd545572681"
            ]
        ]
    },
    {
        "id": "a70fefd545572681",
        "type": "switch",
        "z": "d0a8fa6ddbf311c2",
        "name": "LOGIN?",
        "property": "do_login",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 500,
        "y": 200,
        "wires": [
            [
                "ee92d6343982fd50"
            ]
        ]
    },
    {
        "id": "386a9a683935141e",
        "type": "switch",
        "z": "d0a8fa6ddbf311c2",
        "name": "Force update",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "force_update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "ee92d6343982fd50"
            ],
            [
                "1e0fd0798b825b1d"
            ]
        ]
    },
    {
        "id": "608f9914d32cc6cc",
        "type": "status",
        "z": "d0a8fa6ddbf311c2",
        "name": "",
        "scope": [
            "ee92d6343982fd50",
            "7a8f6a815b1d5ce8",
            "287a6538d9f1a587",
            "06b6737a07825c2c"
        ],
        "x": 880,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "06b6737a07825c2c",
        "type": "function",
        "z": "d0a8fa6ddbf311c2",
        "name": "Status",
        "func": "node.status({fill:\"red\",shape:\"dot\",text:\"Please supply decoded token in msg.payload\"})",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": []
    },
    {
        "id": "7604593fb4c16ba4",
        "type": "subflow:d0a8fa6ddbf311c2",
        "z": "7509ad250bd80ba5",
        "name": "",
        "env": [
            {
                "name": "username",
                "value": "juha.autioniemi@lapinamk.fi",
                "type": "str"
            },
            {
                "name": "password",
                "type": "cred"
            }
        ],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "b310b0e5d3a22710"
            ],
            []
        ]
    }
]
