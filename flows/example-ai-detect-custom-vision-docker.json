[{"id":"dc2b46484141f051","type":"subflow","name":"Parse JPEG [TF]","info":"","category":"Tequ-API Client","in":[{"x":60,"y":100,"wires":[{"id":"955eeab05409cd61"}]}],"out":[{"x":1100,"y":600,"wires":[{"id":"03ba536e0dc79eeb","port":1}]}],"env":[{"name":"is_stream","type":"bool","value":"false","ui":{"type":"input","opts":{"types":["bool","env"]}}},{"name":"latitude","type":"num","value":"66.503059","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"longitude","type":"num","value":"25.726967","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"thumbnail","type":"bool","value":"true","ui":{"type":"input","opts":{"types":["bool","env"]}}},{"name":"width","type":"num","value":"50","ui":{"type":"input","opts":{"types":["num","bin","env"]}}},{"name":"height","type":"num","value":"50","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"camera_serial","type":"str","value":"12345678"}],"meta":{"module":"tequ-parse-jpeg-tf","version":"0.0.1","author":"juha.autioniemi@lapinamk.fi","desc":"Parse JPEG image and add metadata.","license":"MIT"},"color":"#3FADB5","icon":"font-awesome/fa-picture-o","status":{"x":1100,"y":660,"wires":[{"id":"898429879305e246","port":0}]}},{"id":"2eb1056d16ac1fc6","type":"image-info","z":"dc2b46484141f051","name":"","x":210,"y":400,"wires":[["83e4ef6a35b0051d"]]},{"id":"83e4ef6a35b0051d","type":"exif","z":"dc2b46484141f051","name":"","mode":"normal","property":"payload","x":190,"y":460,"wires":[["71d80411eeec75ec"]]},{"id":"8521dc3a9bb265e4","type":"moment","z":"dc2b46484141f051","name":"","topic":"","input":"","inputType":"date","inTz":"ETC/UTC","adjAmount":0,"adjType":"days","adjDir":"add","format":"","locale":"en-US","output":"utc_timestamp","outputType":"msg","outTz":"Europe/Helsinki","x":240,"y":220,"wires":[["156dc7f50cf9ae02"]]},{"id":"156dc7f50cf9ae02","type":"moment","z":"dc2b46484141f051","name":"","topic":"","input":"utc_timestamp","inputType":"msg","inTz":"ETC/UTC","adjAmount":0,"adjType":"days","adjDir":"add","format":"YYYY-MM-DD HH:mm:ss","locale":"en-US","output":"local_timestamp","outputType":"msg","outTz":"Europe/Helsinki","x":240,"y":280,"wires":[["5e837e3f956424a5"]]},{"id":"5e837e3f956424a5","type":"moment","z":"dc2b46484141f051","name":"","topic":"","input":"utc_timestamp","inputType":"msg","inTz":"ETC/UTC","adjAmount":0,"adjType":"days","adjDir":"add","format":"x","locale":"en-US","output":"unix_timestamp","outputType":"msg","outTz":"ETC/UTC","x":240,"y":340,"wires":[["2eb1056d16ac1fc6"]]},{"id":"898429879305e246","type":"status","z":"dc2b46484141f051","name":"","scope":["03ba536e0dc79eeb"],"x":820,"y":660,"wires":[[]]},{"id":"98e82be483a95bdd","type":"function","z":"dc2b46484141f051","name":"Reformat data","func":"let type;\nlet random_name = uuid.v4();\nlet image_type = msg.type;\nlet file_extension;\nlet latitude = Number(env.get(\"latitude\"))\nlet longitude = Number(env.get(\"longitude\"))\nlet unix_timestamp = parseInt(msg.unix_timestamp);\nlet serial;\n\ntry{\n    serial = (msg.exif.image.ImageDescription).split(\"_\")[1];\n}\ncatch(e){\n    env.get(\"camera_serial\")\n}\n\nlet datasource = serial;\n\nif (image_type == \"jpg\") {\n    image_type = \"image/jpeg\"\n    file_extension = \".jpg\"\n}\nelse if (image_type == \"png\") {\n    image_type = \"image/png\"\n    file_extension = \".png\"\n}\n\nmsg.topic = serial;\nmsg.datasource = serial;\nmsg.random_name = random_name;\nmsg.file_extension = file_extension;\n\nlet parameters = {};\ntry { parameters.owner = msg.exif.image.Copyright; } catch (e) { }\ntry { parameters.version = msg.exif.image.Software;} catch (e) { }\ntry { parameters.model = msg.exif.image.model; } catch (e) { }\ntry { parameters.manufacturer = msg.exif.image.Make; } catch (e) { }\ntry { \n    parameters.serial = msg.exif.image.Serial; \n}\ncatch (e) {\n    parameters.serial = env.get(\"camera_serial\"); \n}    \n\nmsg.data = {\n    \"type\": \"Feature\",\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [longitude, latitude]\n    },\n    \"properties\": {\n        \"datasource\": datasource,\n        \"local_timestamp\": msg.local_timestamp,\n        \"utc_timestamp\": msg.utc_timestamp,\n        \"unix_timestamp\": unix_timestamp,\n        \"cos\": {\n            \"bucket\": \"\",\n            \"region\": \"\",\n            \"service_id\": \"\"\n        },\n        \"object\": {\n            \"type\": image_type,\n            \"data\": {\n                \"width\": msg.width,\n                \"height\": msg.height,\n                \"size\": (msg.payload).length,\n                \"exif\": msg.exif,\n                \"parameters\": parameters,\n                \"original\": {\n                    \"image\": (msg.payload).toString('base64'),\n                    \"objectname\": datasource + \"-\" + random_name + file_extension,\n                    \"thumbnail\": (msg.thumbnail).toString('base64'),\n                    \"thumbnail_ms\": msg.thumbnail_ms,\n                    \"mjpeg_process_ms\":0\n                },\n                \"annotated\": {\n                    \"image\": \"\",\n                    \"objectname\": datasource + \"-\" + random_name+ \"_annotated\"+file_extension,\n                    \"thumbnail\": \"\",\n                    \"thumbnail_ms\":0,\n                    \"annotation_ms\":0,\n                    \"total_ms\":0\n                }\n            }\n        },\n        \"computer_vision\": {\n            \"type\": \"\",\n            \"model\": \"\",\n            \"inference_time\": \"\",\n            \"result\": \"\"\n        }\n    }\n}\n\ndelete msg.settings;\ndelete msg.width;\ndelete msg.height;\ndelete msg.type;\ndelete msg.exif;\ndelete msg.thumbnail;\ndelete msg.utc_timestamp;\ndelete msg.local_timestamp;\ndelete msg.unix_timestamp;\ndelete msg.start;\ndelete msg.thumbnail_ms;\ndelete msg.datasource;\ndelete msg.random_name;\ndelete msg.file_extension;\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"uuid","module":"uuid"}],"x":840,"y":520,"wires":[["dcd82181b79268fa"]]},{"id":"71d80411eeec75ec","type":"change","z":"dc2b46484141f051","name":"timer","rules":[{"t":"set","p":"start","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":460,"wires":[["47ad959e399127ee"]]},{"id":"a29e56924f3c4b62","type":"change","z":"dc2b46484141f051","name":"end timer","rules":[{"t":"set","p":"thumbnail_ms","pt":"msg","to":"$millis() - msg.start","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":820,"y":460,"wires":[["98e82be483a95bdd"]]},{"id":"f2fcd32368f15a5a","type":"change","z":"dc2b46484141f051","name":"timer","rules":[{"t":"set","p":"process_start","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":490,"y":140,"wires":[["8521dc3a9bb265e4"]]},{"id":"dcd82181b79268fa","type":"change","z":"dc2b46484141f051","name":"end timer","rules":[{"t":"set","p":"data.properties.object.data.original.mjpeg_process_ms","pt":"msg","to":"$millis() - msg.process_start","tot":"jsonata"},{"t":"delete","p":"process_start","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":820,"y":580,"wires":[["03ba536e0dc79eeb"]]},{"id":"fd80c13b0ff9de2b","type":"split","z":"dc2b46484141f051","name":"","splt":"[255, 216, 255]","spltType":"bin","arraySplt":1,"arraySpltType":"len","stream":true,"addname":"","x":370,"y":80,"wires":[["c0640f9b19b6ea45"]]},{"id":"c0640f9b19b6ea45","type":"function","z":"dc2b46484141f051","name":"Join","func":"let header = Buffer.from(msg.parts.ch);\nlet image = Buffer.from(msg.payload);\nlet arr = [header,image]\nmsg.payload = Buffer.concat(arr)\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":80,"wires":[["f2fcd32368f15a5a"]]},{"id":"03ba536e0dc79eeb","type":"msg-speed","z":"dc2b46484141f051","name":"images","frequency":"sec","interval":1,"estimation":false,"ignore":false,"pauseAtStartup":false,"topicDependent":false,"x":980,"y":580,"wires":[[],[]]},{"id":"955eeab05409cd61","type":"switch","z":"dc2b46484141f051","name":"is_stream?","property":"is_stream","propertyType":"env","rules":[{"t":"true"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":210,"y":100,"wires":[["fd80c13b0ff9de2b"],["f2fcd32368f15a5a"]]},{"id":"47ad959e399127ee","type":"function","z":"dc2b46484141f051","name":"Create thumbnail","func":"async function resize(inputTensor, width, height) {\n    return tf.tidy(() => {\n        let resized = tf.image.resizeBilinear(inputTensor, [height, width])\n        resized = tf.reshape(resized, [height, width, 3])\n        return Promise.resolve(tf.node.encodeJpeg(resized));\n    });\n}\n\nasync function convert(input) {\n    return tf.tidy(() => {\n        const tensor = tf.node.decodeJpeg(input, 3).expandDims(0);\n        const shape = tensor.shape;\n        return tensor\n    });\n}\n\ntry{\n    let thumbnail_time_ms;\n    const image = msg.payload;\n    const start = Date.now();\n    const width = env.get(\"width\")\n    const height = env.get(\"height\")\n    const tensor = await convert(image)\n    const thumbnail = Buffer.from(await resize(tensor, width, height))\n    msg.thumbnail = thumbnail\n    thumbnail_time_ms = Date.now() - start;\n    msg.thumbnail_ms = thumbnail_time_ms;\n    node.status({ fill: \"green\", shape: \"dot\", text: thumbnail_time_ms + \" ms\" });\n    return msg;\n}\ncatch (e) {\n    node.warn(e)\n    node.status({ fill: \"red\", shape: \"dot\", text: \"Convert failed...\" });\n    node.error(\"Resizing failed. Probably input is not an image buffer.\", msg);\n}","outputs":1,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\nconst model = context.get(\"savedmodel\")\ntf.dispose(model)\ncontext.set(\"model\", undefined)\ncontext.set(\"modelInfo\", undefined)","libs":[{"var":"tf","module":"@tensorflow/tfjs-node-gpu"}],"x":550,"y":460,"wires":[["a29e56924f3c4b62"]]},{"id":"4e11b7ba67d55a6b","type":"subflow","name":"[IMG] Annotate [TF]","info":"","category":"Tequ-API Client","in":[{"x":140,"y":140,"wires":[{"id":"d7a726cdc1ba008c"}]}],"out":[{"x":920,"y":140,"wires":[{"id":"9071309af7a7291a","port":0}]},{"x":460,"y":80,"wires":[{"id":"d7a726cdc1ba008c","port":0}]}],"env":[{"name":"box_colors","type":"json","value":"{\"fish\":\"#FFFFFF\",\"pike\":\"#006400\",\"perch\":\"#008000\",\"smolt\":\"#ADD8E6\",\"salmon\":\"#0000FF\",\"trout\":\"#0000FF\",\"cyprinidae\":\"#808080\",\"zander\":\"#009000\",\"bream\":\"#008800\"}","ui":{"type":"input","opts":{"types":["json"]}}},{"name":"image_settings","type":"json","value":"{\"quality\":0.8}","ui":{"type":"input","opts":{"types":["json"]}}},{"name":"image_type","type":"str","value":"image/jpeg","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"JPG"},"v":"image/jpeg"},{"l":{"en-US":"PNG"},"v":"image/png"}]}}},{"name":"bbox_lineWidth","type":"num","value":"5","ui":{"type":"spinner","opts":{"min":0,"max":10}}},{"name":"bbox_text_color","type":"str","value":"white","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"white"},"v":"white"},{"l":{"en-US":"black"},"v":"black"},{"l":{"en-US":"blue"},"v":"blue"},{"l":{"en-US":"green"},"v":"green"},{"l":{"en-US":"yellow"},"v":"yellow"},{"l":{"en-US":"red"},"v":"red"},{"l":{"en-US":"orange"},"v":"orange"}]}}},{"name":"bbox_font","type":"str","value":"30px Arial","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"5px Arial"},"v":"5 px Arial"},{"l":{"en-US":"10px Arial"},"v":"10px Arial"},{"l":{"en-US":"15px Arial"},"v":"15px Arial"},{"l":{"en-US":"20px Arial"},"v":"20px Arial"},{"l":{"en-US":"25px Arial"},"v":"25px Arial"},{"l":{"en-US":"30px Arial"},"v":"30px Arial"},{"l":{"en-US":"35px Arial"},"v":"35px Arial"},{"l":{"en-US":"40px Arial"},"v":"40px Arial"},{"l":{"en-US":"45px Arial"},"v":"45px Arial"},{"l":{"en-US":"50px Arial"},"v":"50px Arial"}]}}},{"name":"label_offset_x","type":"num","value":"0","ui":{"type":"input","opts":{"types":["num"]}}},{"name":"label_offset_y","type":"num","value":"30","ui":{"type":"input","opts":{"types":["num"]}}},{"name":"threshold","type":"num","value":"0.75","ui":{"type":"spinner","opts":{"min":0,"max":1}}},{"name":"width","type":"num","value":"50","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"height","type":"num","value":"50","ui":{"type":"input","opts":{"types":["num","env"]}}}],"meta":{"module":"[IMG] Annotate [TF]","version":"0.0.1","author":"juha.autioniemi@lapinamk.fi","desc":"Annotates prediction results from [AI] Detect subflows.","license":"MIT"},"color":"#87A980","icon":"font-awesome/fa-pencil-square-o","status":{"x":920,"y":200,"wires":[{"id":"1267cc4998d8726c","port":0}]}},{"id":"d7a726cdc1ba008c","type":"function","z":"4e11b7ba67d55a6b","name":"Annotate with  canvas","func":"const start_ms = Date.now();\nconst img = msg.payload;\nconst objects = msg.data.properties.computer_vision.result\nconst labels = msg.data.properties.computer_vision.labels\n\nconst image_type = env.get(\"image_type\");\nconst image_settings = env.get(\"image_settings\");\nconst bbox_lineWidth = env.get(\"bbox_lineWidth\");\nconst bbox_text_color = env.get(\"bbox_text_color\");\nconst label_offset_x = env.get(\"label_offset_x\");\nconst label_offset_y = env.get(\"label_offset_y\");\nconst bbox_font = env.get(\"bbox_font\");\nconst COLORS = env.get(\"box_colors\");\n\n//Define threshold\nlet threshold = 0;\n\nconst global_settings = global.get(\"settings\") || undefined\nlet thresholdType = \"\"\n\nif(global_settings !== undefined){\n    if(\"threshold\" in global_settings){\n        threshold = global_settings[\"threshold\"]\n        thresholdType = \"global\";\n    }\n}\n\nelse if(\"threshold\" in msg){\n    threshold = msg.threshold;\n    thresholdType = \"msg\";\n    if(threshold < 0){\n        threshold = 0\n    }\n    else if(threshold > 1){\n        threshold = 1\n    }\n}\n\nelse{\n    threshold = env.get(\"threshold\");\n    thresholdType = \"env\";\n}\n\nmsg.thresholdUsed = threshold;\nmsg.thresholdTypeUsed = thresholdType;\n\nasync function annotateImage(image) {\n  const localImage = await canvas.loadImage(image);  \n  const cvs = canvas.createCanvas(localImage.width, localImage.height);\n  const ctx = cvs.getContext('2d');  \n  ctx.drawImage(localImage, 0, 0); \n  \n  objects.forEach((obj) => {\n        if(labels.includes(obj.class) && obj.score >= threshold){\n            let [x, y, w, h] = obj.bbox;\n            ctx.lineWidth = bbox_lineWidth;\n            ctx.strokeStyle = COLORS[obj.class];\n            ctx.strokeRect(x, y, w, h);\n            ctx.fillStyle = bbox_text_color;\n            ctx.font = bbox_font;\n            ctx.fillText(obj.class+\" \"+Math.round(obj.score*100)+\" %\",x+label_offset_x,y+label_offset_y);\n        }\n      });\n  \n  return cvs.toBuffer(image_type, image_settings);\n}\n\nlet diff_ms = start_ms - Date.now()\nmsg.data.properties.object.data.annotated.annotation_ms = diff_ms\n\nif(objects.length > 0){\n    msg.data.properties.object.data.annotated.image = await annotateImage(img)   \n    msg.objects_found = true\n    //msg.payload.annotation.objects_found = true\n    node.status({fill:\"green\",shape:\"dot\",text:diff_ms+\" ms\"});\n}\nelse{\n    msg.objects_found = false\n    //msg.payload.annotation.objects_found = false\n    node.status({ fill: \"red\", shape: \"dot\", text: \"No objects to annotate\"});\n}\n\ndelete msg.thresholdUsed;\ndelete msg.start;\ndelete msg.thresholdTypeUsed;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"canvas","module":"canvas"}],"x":300,"y":140,"wires":[["9071309af7a7291a"]]},{"id":"1267cc4998d8726c","type":"status","z":"4e11b7ba67d55a6b","name":"","scope":null,"x":340,"y":200,"wires":[[]]},{"id":"9071309af7a7291a","type":"function","z":"4e11b7ba67d55a6b","name":"Create thumbnail","func":"async function resize(inputTensor, width, height) {\n    return tf.tidy(() => {\n        let resized = tf.image.resizeBilinear(inputTensor, [height, width])\n        resized = tf.reshape(resized, [height, width, 3])\n        return Promise.resolve(tf.node.encodeJpeg(resized));\n    });\n}\n\nasync function convert(input) {\n    return tf.tidy(() => {\n        const tensor = tf.node.decodeJpeg(input, 3).expandDims(0);\n        const shape = tensor.shape;\n        return tensor\n    });\n}\n\ntry{   \n    if(msg.objects_found){\n        let thumbnail_time_ms;\n        const image = msg.data.properties.object.data.annotated.image;\n        const start = Date.now();\n        const width = env.get(\"width\")\n        const height = env.get(\"height\")\n        const tensor = await convert(image)\n        const thumbnail = Buffer.from(await resize(tensor, width, height))\n        msg.data.properties.object.data.annotated.thumbnail = thumbnail\n        thumbnail_time_ms = Date.now() - start;\n        msg.data.properties.object.data.annotated.thumbnail_ms = thumbnail_time_ms;\n        node.status({ fill: \"green\", shape: \"dot\", text: thumbnail_time_ms + \" ms\" });\n    }\n    return msg;\n}\ncatch (e) {\n    node.warn(e)\n    node.status({ fill: \"red\", shape: \"dot\", text: \"Convert failed...\" });\n    node.error(\"Resizing failed. Probably input is not an image buffer.\", msg);\n}","outputs":1,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\nconst model = context.get(\"savedmodel\")\ntf.dispose(model)\ncontext.set(\"model\", undefined)\ncontext.set(\"modelInfo\", undefined)","libs":[{"var":"tf","module":"@tensorflow/tfjs-node-gpu"}],"x":710,"y":140,"wires":[[]]},{"id":"7b3785bfbdce92c6","type":"tab","label":"Flow 7","disabled":false,"info":"","env":[]},{"id":"bf903bd72ac4ca41","type":"fileinject","z":"7b3785bfbdce92c6","name":"","x":140,"y":200,"wires":[["e7303ccdd07057e8"]]},{"id":"75ef8533406dd058","type":"debug","z":"7b3785bfbdce92c6","name":"debug 63","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1060,"y":200,"wires":[]},{"id":"be605005d9a9f129","type":"http request","z":"7b3785bfbdce92c6","name":"req","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":690,"y":200,"wires":[["e1e81946d00bc735","8f6e6897a691d163"]]},{"id":"5b84b41668416e74","type":"function","z":"7b3785bfbdce92c6","name":"Custom Vision req","func":"let imageBuffer = msg.payload\nlet start = Date.now()\nlet data = msg.data;\n\nlet custom_vision_request = {\n    \"method\":\"POST\",\n    \"payload\":imageBuffer,\n    \"image\":imageBuffer,\n    \"url\":\"http://localhost:8077/image\",\n    \"headers\":{\n        \"Content-Type\":\"application/octet-stream\"\n    },\n    \"start\":start,\n    \"data\":data\n}\n\nmsg.data.properties.computer_vision.model = \"Custom Vision model X\"\nmsg.data.properties.computer_vision.type = \"object detection\"\nmsg.data.properties.computer_vision.labels = [\"bream\", \"cyprinidae\", \"perch\", \"pike\", \"rainbow trout\", \"smolt\", \"trout\", \"salmon\", \"Negative\", \"lamprey\"]\nreturn custom_vision_request;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":200,"wires":[["be605005d9a9f129"]]},{"id":"71bbbb644952cbae","type":"debug","z":"7b3785bfbdce92c6","name":"debug 64","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1080,"y":320,"wires":[]},{"id":"e1e81946d00bc735","type":"function","z":"7b3785bfbdce92c6","name":"Process response","func":"let start = msg.start;\nlet end = Date.now();\nlet diff = end - start;\n\nnode.status({fill:\"blue\",shape:\"dot\",text:diff+ \" ms\"});\nlet predictions = msg.payload.predictions;\nlet result = []\nlet width = msg.data.properties.object.data.width;\nlet height = msg.data.properties.object.data.height;\n\n//Convert bounding boxes to pixels format\nfor(let i=0;i<predictions.length;i++){\n    let newResult = {\n        \"bbox\": [\n            predictions[i].boundingBox.left * width,\n            predictions[i].boundingBox.top * height,     \n            predictions[i].boundingBox.width * width,\n            predictions[i].boundingBox.height * height,\n        ],\n        \"class\": predictions[i].tagName,\n        \"label\": predictions[i].tagName,\n        \"id\": predictions[i].tagId,\n        \"score\": predictions[i].probability  \n    }\n    result.push(newResult)\n}\n    \nmsg.data.properties.computer_vision.result = result\nmsg.data.properties.computer_vision.inference_time = diff\nmsg.payload = msg.image\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":870,"y":200,"wires":[["75ef8533406dd058","b694eab1bfa848f2"]]},{"id":"8f6e6897a691d163","type":"debug","z":"7b3785bfbdce92c6","name":"debug 66","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":700,"y":280,"wires":[]},{"id":"c53ace6cebd071fb","type":"image","z":"7b3785bfbdce92c6","name":"","width":"720","data":"data.properties.object.data.annotated.image","dataType":"msg","thumbnail":false,"active":true,"pass":false,"outputs":0,"x":880,"y":400,"wires":[]},{"id":"6631bff79ef660f8","type":"debug","z":"7b3785bfbdce92c6","name":"debug 67","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1300,"y":240,"wires":[]},{"id":"b694eab1bfa848f2","type":"subflow:4e11b7ba67d55a6b","z":"7b3785bfbdce92c6","name":"","env":[{"name":"threshold","value":"0.5","type":"num"}],"x":1090,"y":260,"wires":[["c53ace6cebd071fb","6631bff79ef660f8"],["71bbbb644952cbae"]]},{"id":"e7303ccdd07057e8","type":"subflow:dc2b46484141f051","z":"7b3785bfbdce92c6","name":"","x":310,"y":200,"wires":[["5b84b41668416e74"]]}]
